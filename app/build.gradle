apply plugin: 'com.android.application'
// apparently, this should be enabled before extensions - per Gradle
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'


android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.example.modelviewwhateverpractice"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "com.example.modelviewwhateverpractice.EspressoTestRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            applicationIdSuffix ".debug"
        }
    }
    flavorDimensions("normal")
    productFlavors {
        mock {
            dimension "normal"
            applicationIdSuffix ".mock"
        }
        prod {
            dimension "normal"
        }
    }
    // This prevents the creation of mockRelease
    android.variantFilter { variant ->
        if (variant.buildType.name.equals('release') && variant.getFlavors().get(0).name.equals('mock')) {
            variant.setIgnore(true)
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    dataBinding {
        enabled true
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation "androidx.core:core-ktx:1.0.2"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    // Adding a Fragment added this.
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'

    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation "com.google.android.material:material:1.0.0"
    implementation 'androidx.recyclerview:recyclerview:1.0.0'

    implementation "androidx.lifecycle:lifecycle-extensions:2.0.0"
    implementation "androidx.lifecycle:lifecycle-common-java8:2.0.0"

    def lifecycle_version = "2.1.0"
    implementation "androidx.room:room-runtime:$lifecycle_version"
    annotationProcessor "androidx.room:room-compiler:$lifecycle_version"
    implementation "androidx.room:room-rxjava2:$lifecycle_version"

    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.10'

    def daggerVersion = "2.23.2"
    implementation "com.google.dagger:dagger:$daggerVersion"
    annotationProcessor "com.google.dagger:dagger-compiler:$daggerVersion"

    implementation 'com.jakewharton.timber:timber:4.7.1'

    debugImplementation "com.squareup.leakcanary:leakcanary-android:2.0-alpha-3"


    // Local testing
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.hamcrest:hamcrest-library:2.1'
    // Compared to core, this enable mocking of final classes.
    testImplementation 'org.mockito:mockito-inline:2.28.2'

    // AndroidJUnit4 from here.
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'

    // Espresso
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-intents:3.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.2.0'

    // RxIdle
    androidTestImplementation 'com.squareup.rx.idler:rx2-idler:0.9.1'

    // FragmentScenario
    // For fragment-testing to work, both of these dependencies
    // have to be in the debugImplementation configuration.
    debugImplementation 'androidx.test:core:1.2.0'
    debugImplementation 'androidx.fragment:fragment-testing:1.2.0-alpha01'
}
